import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by @pongsatt/graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  randomAddress?: GQLAddress;
}

export interface GQLAddress {
  id: string;
  name: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Address?: GQLAddressTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  randomAddress?: QueryToRandomAddressResolver<TParent>;
}

export interface QueryToRandomAddressResolver<TParent = any, TResult = GQLAddress|Promise<GQLAddress>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddressTypeResolver<TParent = any> {
  id?: AddressToIdResolver<TParent>;
  name?: AddressToNameResolver<TParent>;
}

export interface AddressToIdResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToNameResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
